/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Test.jj */
/*@egen*//*******************************
***** SECTION 1 - OPTIONS *****
*******************************/
options
{
IGNORE_CASE = false;
           
               
}
/*********************************
***** SECTION 2 - USER CODE *****
*********************************/
PARSER_BEGIN(ExprLang)
import java.io.*;
import java.util.*;
public class ExprLang/*@bgen(jjtree)*/implements ExprLangTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTExprLangState jjtree = new JJTExprLangState();

/*@egen*/
    public static Hashtable ST = new Hashtable();
    public static void main(String[] args) throws ParseException, FileNotFoundException
    {
        String temp;
        STC temp2;
        if (args.length < 1)
        {
            System.out.println("Please pass in the filename.");
            System.exit(1);
        }
        ExprLang parser = new ExprLang(new FileInputStream(args[0]));
        SimpleNode root = parser.program();
        System.out.println();
        System.out.println("Program:");
        PrintVisitor pv = new PrintVisitor();
        root.jjtAccept(pv, null);
        System.out.println();
        System.out.println("Type Checking:");
        TypeCheckVisitor tc = new TypeCheckVisitor();
        root.jjtAccept(tc, ST);
    }
}
PARSER_END(ExprLang)

/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/
TOKEN_MGR_DECLS:
{
    static int linenumber = 0;
}
SKIP: /* Whitespace */
{
    "\t"
    | "\n" {linenumber++;}
    | "\r"
    | " "
}
TOKEN:
{
    <LPAREN: "(">
    | <RPAREN: ")">
    | <ADD_OP: "+" | "-">
    | <MULT_OP: "*" | "/">
    | <NOT_OP: "~">
    | <BOOL_OP: "&" | "|">
    | <INT: "int">
    | <BOOL: "bool">
    | <NUMBER: (["0"-"9"])+>
    | <ID: (["a"-"z","A"-"Z"])+>
    | <SEMIC: ";">
}
/**************************************************************************
* SECTION 4 - THE GRAMMAR & PRODUCTION RULES - WOULD NORMALLY START HERE *
**************************************************************************/
SimpleNode program() : {/*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
    try {
/*@egen*/
    Stms() <EOF>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Stms()       : {}
{
    (SimpleStm() <SEMIC> [/*@bgen(jjtree) #Stms( 2) */
                          {
                            ASTStms jjtn001 = new ASTStms(JJTSTMS);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/Stms()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/         ] )
}
void SimpleStm()       : {}
{
    (expression())
    | (declaration())
}
void declaration()       : {Token t; String name;}
{
    t = <INT> name = identifier()/*@bgen(jjtree) #Decl( 1) */
                                  {
                                    ASTDecl jjtn001 = new ASTDecl(JJTDECL);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001,  1);
                                    jjtc001 = false;
                                  }
/*@egen*/ {jjtn001.value = t.image;
    ST.put(name, new STC("Int", name));}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                    }
                                  }
/*@egen*/         
    | t = <BOOL> name = identifier()/*@bgen(jjtree) #Decl( 1) */
                                     {
                                       ASTDecl jjtn002 = new ASTDecl(JJTDECL);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn002,  1);
                                       jjtc002 = false;
                                     }
/*@egen*/ {jjtn002.value = t.image;
    ST.put(name, new STC("Bool", name));}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002,  1);
                                       }
                                     }
/*@egen*/         
}

void expression()       : {Token t;}
{
    term()
    (
    (t = <ADD_OP> term()/*@bgen(jjtree) #Add_op( 2) */
                         {
                           ASTAdd_op jjtn001 = new ASTAdd_op(JJTADD_OP);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001,  2);
                           jjtc001 = false;
                         }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
                         }
/*@egen*/           
    )
    | (t = <BOOL_OP> term()/*@bgen(jjtree) #Bool_op( 2) */
                            {
                              ASTBool_op jjtn002 = new ASTBool_op(JJTBOOL_OP);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;
                            }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
                            }
/*@egen*/            
    )
    )*
}
void term()       : {Token t;}
{
    <NOT_OP>/*@bgen(jjtree) #Not_op( 1) */
             {
               ASTNot_op jjtn001 = new ASTNot_op(JJTNOT_OP);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ factor()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  1);
               }
             }
/*@egen*/           
    |
    factor()
    (t = <MULT_OP> factor()/*@bgen(jjtree) #Mult_op( 2) */
                            {
                              ASTMult_op jjtn002 = new ASTMult_op(JJTMULT_OP);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;
                            }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
                            }
/*@egen*/            
    )*
}
void factor()       : {}
{
    (<LPAREN>/*@bgen(jjtree) #Exp( 1) */
              {
                ASTExp jjtn001 = new ASTExp(JJTEXP);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ expression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  1);
                }
              }
/*@egen*/         <RPAREN>
    | number()
    | identifier()
    )
}

void number() : {/*@bgen(jjtree) number */
                 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) number */
    try {
/*@egen*/
    t = <NUMBER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
String identifier() : {/*@bgen(jjtree) identifier */
                       ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
    try {
/*@egen*/
    t = <ID>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}