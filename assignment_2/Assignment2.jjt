options { 
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    VISITOR = true;
}
PARSER_BEGIN(SLPParser)
import java.util.*;
import java.io.*;

public class SLPParser {
    public static Hashtable ST = new Hashtable();
    public static void main(String args[]) throws ParseException, FileNotFoundException {
        if (args.length < 1) {
            System.out.println("Please pass a filename into the program");
            System.exit(1);
        }
        SLPParser parser = new SLPParser(new FileInputStream(args[0]));
        SimpleNode root = parser.Prog(); // starting node of the program
        System.out.println("\nProgram:");
        PrintVisitor pv = new PrintVisitor();
        root.jjAccept(pv, null);

        System.out.println("\nType Checking:");
        TypeCheckVisitor tc = new TypeCheckVisitor();
        root.jjAccept(tc, ST);

        root.dump("");
    }
}
PARSER_END(SLPParser)
/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/
TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}
SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
    | < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

SKIP : /* COMMENTS */
{
    "/*" { commentNesting++; } : IN_COMMENT
}
<IN_COMMENT> SKIP :
{
    "/*" { commentNesting++; }
    | "*/" { commentNesting--;
        if (commentNesting == 0)
        SwitchTo(DEFAULT);
    }
    | <~[]>
}
TOKEN : /* Keywords and punctuation */
{
    < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : ":=" >
    | < PRINT : "print" >
    | < LBR : "(" >
    | < RBR : ")" >
    | < COMMA : "," >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < DIV_SIGN : "/" >
}

TOKEN [IGNORE_CASE]: /* Keywords */
{
    < RETURN : "return" >
    | < MAIN : "main" >
    | < BEGIN : "begin" >
    | < END : "end" >
    | < VARIABLE : "variable" >
    | < CONSTANT : "constant" >
    | < TYPE : ("integer" | "boolean") >
    | < IS : "is" >
    | < BOOL : "true" | "false" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < WHILE : "while" > 
    | < SKIP_WORD : "skip" > 
}

TOKEN: /* Logical Operators */
{
    < LOG_NEG : "~" > // logical negation
    | < LOG_DIS : "|" > // logical disjunction
    | < LOG_AND : "&" > // logical and
}

TOKEN: /* Comparison Operators */
{
    < EQUALS : "=" > // logical equals
    | < NOT_EQUALS : "!=" > // not equals
    | < LESS_THAN : "<" > // less than
    | < LESS_EQUALS: "<=" > // less than or equals 
    | < GREATER_THAN: ">" > // greater than
    | < GREATER_EQUALS: ">=" > // greater than or equals
}

TOKEN : /* Numbers and identifiers */
{
    < NUM : ("-")*(<DIGIT>)+ > // num can start with a minus
    | < #DIGIT : ["0" - "9"] >
    | < ID : <LETTER> (<LETTER> | <DIGIT>)* >
    | < #LETTER : ["a" - "z", "A" - "Z", "_"] >
}

TOKEN : /* Anything not recognised so far */
{
    < OTHER : ~[] >
}
/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

void Prog() #PROGRAM : {}
{
    code() <EOF> {return jjtThis;}
}

void code() #VOID : {}
{
    (block() [code()])
}

void block() #VOID : {}
{
    decl_list()
    | func_list()
    | main_statement()
}

void decl_list() #VOID : {}
{
    (decl() [<SEMIC> decl_list()])
}

void decl() : {}
{
    var_decl()
    | const_decl()
}

void var_decl() #VAR : {}
{
    (<VARIABLE> [id() <COLON> <TYPE> <SEMIC>])
}

void const_decl() #CONST : {}
{
    (<CONSTANT> [id() <COLON> <TYPE> <ASSIGN> expr() <SEMIC>])
}

void func_list() #VOID : {}
{
    (func() [func_list()])
}

void func() #FUNCTION : {}
{
    <TYPE> id() <LBR> (param_list())* <RBR> <IS> (decl_list())* (statement_block())
}

void statement_block() #VOID : {}
{
    (statement() [statement_block()])
}

void statement() #STATEMENT : {}
{
    LOOKAHEAD(2) (id() <ASSIGN> expr() <SEMIC>)
    | LOOKAHEAD(2) id() <LBR> (expr())* <RBR> <SEMIC>
    | <BEGIN> (statement_block())* return_statement() <END>
    | <IF> condition() <BEGIN> (statement_block())* <END>
    | <ELSE> <BEGIN> (statement_block()) * <END>
    | <WHILE> condition() <BEGIN> (statement_block())* <END>
    | <SKIP_WORD> <SEMIC>
}

void condition() #VOID : {} 
{
    simple_condition() (log_ops() simple_condition())*
}

void simple_condition() #CONDITION : {}
{
    <LOG_NEG> condition()
    | <LBR> condition() <RBR>
    | expr() comp_ops() expr()
}

void comp_ops() #COMP_OPS : {} 
{
    <EQUALS>
    | <NOT_EQUALS>
    | <LESS_THAN>
    | <LESS_EQUALS>
    | <GREATER_THAN>
    | <GREATER_EQUALS>
}

void log_ops() #LOG_OPS : {}
{
    <LOG_DIS>
    | <LOG_AND>
}

void expr() #EXPR: {}
{
    LOOKAHEAD(3) fragment() bin_op() fragment()
    | LOOKAHEAD(2) (id())* <LBR> expr() <RBR>
    | arg_list()
    | fragment()
}

void arg_list() #VOID : {}
{
    nemp_arg_list()
}

void nemp_arg_list() #ARG: {}
{
    (id() (<COMMA> nemp_arg_list())*)
}

void fragment() #FRAGMENT: {}
{
    id()
    | <MINUS_SIGN> id()
    | <NUM>
    | <BOOL>
}

void bin_op() #BIN_OPS: {}
{
    <PLUS_SIGN> 
    | <MINUS_SIGN>
}

void param_list() #VOID : {}
{
    (nemp_param_list())
}

void nemp_param_list() #VOID : {}
{
    param() [<COMMA> nemp_param_list()]
}

void param() #PARAM : {} 
{
    id() <COLON> <TYPE>
}

void return_statement() #RETURN : {} 
{ 
    <RETURN> <LBR> (expr())* <RBR> <SEMIC>
}

void main_statement() #MAIN : {} 
{
    <MAIN> <BEGIN> (decl_list())* (statement_block())* <END>
}

void id() #ID : {Token t;}
{
    t = <ID> {jjtThis.value = t.image;}
}