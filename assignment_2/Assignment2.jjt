options { 
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    VISITOR = true;
}
PARSER_BEGIN(SLPParser)
import java.util.*;
import java.io.*;

public class SLPParser {
    public static SymbolTable ST = new SymbolTable();
    public static void main(String args[]) throws ParseException, FileNotFoundException {
        if (args.length < 1) {
            System.out.println("Please supply a source file to compile");
            return;
        }
        SLPParser parser = new SLPParser(new FileInputStream(args[0]));
        SimpleNode root = parser.Prog();
        root.dump("");
        // System.out.println(ST.check("x"));
        // System.out.println(ST.get("y")); 
    }
}
PARSER_END(SLPParser)
/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/
TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}
SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
    | < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

SKIP : /* COMMENTS */
{
    "/*" { commentNesting++; } : IN_COMMENT
}
<IN_COMMENT> SKIP :
{
    "/*" { commentNesting++; }
    | "*/" { commentNesting--;
        if (commentNesting == 0)
        SwitchTo(DEFAULT);
    }
    | <~[]>
}
TOKEN : /* Keywords and punctuation */
{
    < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : ":=" >
    | < PRINT : "print" >
    | < LBR : "(" >
    | < RBR : ")" >
    | < COMMA : "," >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < DIV_SIGN : "/" >
}

TOKEN [IGNORE_CASE]: /* Keywords */
{
    < RETURN : "return" >
    | < MAIN : "main" >
    | < BEGIN : "begin" >
    | < END : "end" >
    | < VARIABLE : "variable" >
    | < CONSTANT : "constant" >
    | < TYPE : ("integer" | "boolean") >
    | < IS : "is" >
    | < BOOL : "true" | "false" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < WHILE : "while" > 
    | < SKIP_WORD : "skip" > 
}

TOKEN: /* Logical Operators */
{
    < LOG_NEG : "~" > // logical negation
    | < LOG_DIS : "|" > // logical disjunction
    | < LOG_AND : "&" > // logical and
}

TOKEN: /* Comparison Operators */
{
    < EQUALS : "=" > // logical equals
    | < NOT_EQUALS : "!=" > // not equals
    | < LESS_THAN : "<" > // less than
    | < LESS_EQUALS: "<=" > // less than or equals 
    | < GREATER_THAN: ">" > // greater than
    | < GREATER_EQUALS: ">=" > // greater than or equals
}

TOKEN : /* Numbers and identifiers */
{
    < NUM : ("-")*(<DIGIT>)+ > // num can start with a minus
    | < #DIGIT : ["0" - "9"] >
    | < ID : <LETTER> (<LETTER> | <DIGIT>)* >
    | < #LETTER : ["a" - "z", "A" - "Z", "_"] >
}

TOKEN : /* Anything not recognised so far */
{
    < OTHER : ~[] >
}
/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

SimpleNode Prog() #PROGRAM : {}
{
    code() <EOF> {return jjtThis;}
}

void code()  : {}
{
    (block() [code()])
}

void block() #BLOCK : {}
{
    decl_list()
    | func_list()
    //| main_statement()
}

void decl_list()  : {}
{
    (decl() <SEMIC> [decl_list()])
}

void decl()  : {}
{
    var_decl()  
    | const_decl()
}

/** FUNCTION **/
void func_list() : {}
{
    (func() [func_list()])
}

void func() : {}
{
    { ST.newScope(); }
    <TYPE> <ID> <LBR> (param_list())* <RBR> <IS> (decl_list())*
    { ST.endScope(); }
}

void param_list() : {}
{
    (nemp_param_list())
}

void nemp_param_list() : {}
{   
    param() [<COMMA> nemp_param_list()]
}

void param() : {Token t; String name;} 
{
    name = id() <COLON> t = <TYPE>
        {
            jjtThis.value = t.image;
            ST.insert(t.image, name); // move to type checker
        } #VAR(1)
}

/** DECLARATION **/
void var_decl()  : { Token t; String name; }
{
    <VARIABLE> name = id() <COLON> t = <TYPE>
        {
            jjtThis.value = t.image;
            ST.insert(t.image, name); // move to type checker
        } #VAR(1)
}

void const_decl() : { Token t; String name; }
{
    <CONSTANT> name = id() <COLON> t = <TYPE>
        {
            jjtThis.value = t.image;
            ST.insert(t.image, name); // move to type checker
        }
}

/** CONDITION **/
void condition() : {}   
{
    simple_condition() (log_ops() simple_condition())*
}

void simple_condition() : {}
{
    <LOG_NEG> condition()
    | <LBR> condition() <RBR>
    //| expr() comp_ops() expr()
}

void comp_ops() : {} 
{
    <EQUALS>
    | <NOT_EQUALS>
    | <LESS_THAN>
    | <LESS_EQUALS>
    | <GREATER_THAN>
    | <GREATER_EQUALS>
}

void log_ops() : {}
{
    <LOG_DIS>
    | <LOG_AND>
}

/** SIMPLE TOKENS **/
String id()  : { Token t; }
{
    t = <ID> {jjtThis.value = t.image; return t.image;}
}