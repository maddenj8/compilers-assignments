/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Assignment2.jj */
/*@egen*/options { 
    JAVA_UNICODE_ESCAPE = true;
                 
                   
}
PARSER_BEGIN(SLPParser)
import java.util.*;
import java.io.*;

public class SLPParser/*@bgen(jjtree)*/implements SLPParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTSLPParserState jjtree = new JJTSLPParserState();

/*@egen*/
    public static Hashtable ST = new Hashtable();
    public static void main(String args[]) throws ParseException, FileNotFoundException {
        if (args.length < 1) {
            System.out.println("Please pass a filename into the program");
            System.exit(1);
        }
        SLPParser parser = new SLPParser(new FileInputStream(args[0]));
        SimpleNode root = parser.Prog(); // starting node of the program
        System.out.println("\nProgram:");
        PrintVisitor pv = new PrintVisitor();
        root.jjAccept(pv, null);

        System.out.println("\nType Checking:");
        TypeCheckVisitor tc = new TypeCheckVisitor();
        root.jjAccept(tc, ST);

        root.dump("");
    }
}
PARSER_END(SLPParser)
/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/
TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}
SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
    | < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

SKIP : /* COMMENTS */
{
    "/*" { commentNesting++; } : IN_COMMENT
}
<IN_COMMENT> SKIP :
{
    "/*" { commentNesting++; }
    | "*/" { commentNesting--;
        if (commentNesting == 0)
        SwitchTo(DEFAULT);
    }
    | <~[]>
}
TOKEN : /* Keywords and punctuation */
{
    < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : ":=" >
    | < PRINT : "print" >
    | < LBR : "(" >
    | < RBR : ")" >
    | < COMMA : "," >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < DIV_SIGN : "/" >
}

TOKEN [IGNORE_CASE]: /* Keywords */
{
    < RETURN : "return" >
    | < MAIN : "main" >
    | < BEGIN : "begin" >
    | < END : "end" >
    | < VARIABLE : "variable" >
    | < CONSTANT : "constant" >
    | < TYPE : ("integer" | "boolean") >
    | < IS : "is" >
    | < BOOL : "true" | "false" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < WHILE : "while" > 
    | < SKIP_WORD : "skip" > 
}

TOKEN: /* Logical Operators */
{
    < LOG_NEG : "~" > // logical negation
    | < LOG_DIS : "|" > // logical disjunction
    | < LOG_AND : "&" > // logical and
}

TOKEN: /* Comparison Operators */
{
    < EQUALS : "=" > // logical equals
    | < NOT_EQUALS : "!=" > // not equals
    | < LESS_THAN : "<" > // less than
    | < LESS_EQUALS: "<=" > // less than or equals 
    | < GREATER_THAN: ">" > // greater than
    | < GREATER_EQUALS: ">=" > // greater than or equals
}

TOKEN : /* Numbers and identifiers */
{
    < NUM : ("-")*(<DIGIT>)+ > // num can start with a minus
    | < #DIGIT : ["0" - "9"] >
    | < ID : <LETTER> (<LETTER> | <DIGIT>)* >
    | < #LETTER : ["a" - "z", "A" - "Z", "_"] >
}

TOKEN : /* Anything not recognised so far */
{
    < OTHER : ~[] >
}
/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

void Prog()          : {/*@bgen(jjtree) PROGRAM */
  ASTPROGRAM jjtn000 = new ASTPROGRAM(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROGRAM */
    try {
/*@egen*/
    code() <EOF>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void code()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    (block() [code()])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void block()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    decl_list()
    | func_list()
    | main_statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void decl_list()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    (decl() [<SEMIC> decl_list()])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void decl() : {/*@bgen(jjtree) decl */
  ASTdecl jjtn000 = new ASTdecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) decl */
    try {
/*@egen*/
    var_decl()
    | const_decl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void var_decl()      : {/*@bgen(jjtree) VAR */
  ASTVAR jjtn000 = new ASTVAR(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VAR */
    try {
/*@egen*/
    (<VARIABLE> [id() <COLON> <TYPE> <SEMIC>])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void const_decl()        : {/*@bgen(jjtree) CONST */
  ASTCONST jjtn000 = new ASTCONST(JJTCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CONST */
    try {
/*@egen*/
    (<CONSTANT> [id() <COLON> <TYPE> <ASSIGN> expr() <SEMIC>])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void func_list()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    (func() [func_list()])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void func()           : {/*@bgen(jjtree) FUNCTION */
  ASTFUNCTION jjtn000 = new ASTFUNCTION(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FUNCTION */
    try {
/*@egen*/
    <TYPE> id() <LBR> (param_list())* <RBR> <IS> (decl_list())* (statement_block())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void statement_block()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    (statement() [statement_block()])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void statement()            : {/*@bgen(jjtree) STATEMENT */
  ASTSTATEMENT jjtn000 = new ASTSTATEMENT(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STATEMENT */
    try {
/*@egen*/
    LOOKAHEAD(2) (id() <ASSIGN> expr() <SEMIC>)
    | LOOKAHEAD(2) id() <LBR> (expr())* <RBR> <SEMIC>
    | <BEGIN> (statement_block())* return_statement() <END>
    | <IF> condition() <BEGIN> (statement_block())* <END>
    | <ELSE> <BEGIN> (statement_block()) * <END>
    | <WHILE> condition() <BEGIN> (statement_block())* <END>
    | <SKIP_WORD> <SEMIC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void condition()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    simple_condition() (log_ops() simple_condition())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void simple_condition()            : {/*@bgen(jjtree) CONDITION */
  ASTCONDITION jjtn000 = new ASTCONDITION(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CONDITION */
    try {
/*@egen*/
    <LOG_NEG> condition()
    | <LBR> condition() <RBR>
    | expr() comp_ops() expr()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void comp_ops()           : {/*@bgen(jjtree) COMP_OPS */
  ASTCOMP_OPS jjtn000 = new ASTCOMP_OPS(JJTCOMP_OPS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) COMP_OPS */
    try {
/*@egen*/
    <EQUALS>
    | <NOT_EQUALS>
    | <LESS_THAN>
    | <LESS_EQUALS>
    | <GREATER_THAN>
    | <GREATER_EQUALS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void log_ops()          : {/*@bgen(jjtree) LOG_OPS */
  ASTLOG_OPS jjtn000 = new ASTLOG_OPS(JJTLOG_OPS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LOG_OPS */
    try {
/*@egen*/
    <LOG_DIS>
    | <LOG_AND>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expr()      : {/*@bgen(jjtree) EXPR */
  ASTEXPR jjtn000 = new ASTEXPR(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXPR */
    try {
/*@egen*/
    LOOKAHEAD(3) fragment() bin_op() fragment()
    | LOOKAHEAD(2) (id())* <LBR> expr() <RBR>
    | arg_list()
    | fragment()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void arg_list()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    nemp_arg_list()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void nemp_arg_list()     : {/*@bgen(jjtree) ARG */
  ASTARG jjtn000 = new ASTARG(JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ARG */
    try {
/*@egen*/
    (id() (<COMMA> nemp_arg_list())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void fragment()          : {/*@bgen(jjtree) FRAGMENT */
  ASTFRAGMENT jjtn000 = new ASTFRAGMENT(JJTFRAGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FRAGMENT */
    try {
/*@egen*/
    id()
    | <MINUS_SIGN> id()
    | <NUM>
    | <BOOL>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void bin_op()         : {/*@bgen(jjtree) BIN_OPS */
  ASTBIN_OPS jjtn000 = new ASTBIN_OPS(JJTBIN_OPS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BIN_OPS */
    try {
/*@egen*/
    <PLUS_SIGN> 
    | <MINUS_SIGN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void param_list()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    (nemp_param_list())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void nemp_param_list()       : {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
    try {
/*@egen*/
    param() [<COMMA> nemp_param_list()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void param()        : {/*@bgen(jjtree) PARAM */
  ASTPARAM jjtn000 = new ASTPARAM(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) PARAM */
    try {
/*@egen*/
    id() <COLON> <TYPE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void return_statement()         : {/*@bgen(jjtree) RETURN */
  ASTRETURN jjtn000 = new ASTRETURN(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) RETURN */
    try {
/*@egen*/ 
    <RETURN> <LBR> (expr())* <RBR> <SEMIC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void main_statement()       : {/*@bgen(jjtree) MAIN */
  ASTMAIN jjtn000 = new ASTMAIN(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) MAIN */
    try {
/*@egen*/
    <MAIN> <BEGIN> (decl_list())* (statement_block())* <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void id()     : {/*@bgen(jjtree) ID */
                 ASTID jjtn000 = new ASTID(JJTID);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
    try {
/*@egen*/
    t = <ID>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}